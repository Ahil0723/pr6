#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <time.h>

#define PORT 8080
#define BUFFER_SIZE 256

void log_message(const char *client_address, const char *message) {
    printf("%s: %s\n", client_address, message);
}

int main(int argc, char *argv[]) {
    if (argc != 2) {
        fprintf(stderr, "Usage: %s <port>\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    int server_fd, new_socket;
    struct sockaddr_in address;
    int opt = 1;
    int addrlen = sizeof(address);
    char buffer[BUFFER_SIZE] = {0};

    // Создание сокета
    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {
        perror("Socket failed");
        exit(EXIT_FAILURE);
    }

    // Привязка сокета к порту
    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(opt))) {
        perror("Set socket options failed");
        exit(EXIT_FAILURE);
    }
    
    address.sin_family = AF_INET;
    address.sin_addr.s_addr = INADDR_ANY;
    address.sin_port = htons(atoi(argv[1]));

    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address)) < 0) {
        perror("Bind failed");
        exit(EXIT_FAILURE);
    }

    if (listen(server_fd, 3) < 0) {
        perror("Listen failed");
        exit(EXIT_FAILURE);
    }

    printf("Server is listening on port %s\n", argv[1]);

    while (1) {
        if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen)) < 0) {
            perror("Accept failed");
            exit(EXIT_FAILURE);
        }

        char client_address[INET_ADDRSTRLEN];
        inet_ntop(AF_INET, &address.sin_addr, client_address, sizeof(client_address));
        log_message(client_address, "Client connected");

        // Генерация случайного числа от 1 до 100
        srand(time(NULL));
        int number_to_guess = rand() % 100 + 1;
        int guess = 0;

        while (1) {
            memset(buffer, 0, BUFFER_SIZE);
            read(new_socket, buffer, BUFFER_SIZE);
            guess = atoi(buffer);

            if (guess < number_to_guess) {
                log_message(client_address, "Guess too low.");
                send(new_socket, "Higher!", strlen("Higher!") + 1, 0);
            } else if (guess > number_to_guess) {
                log_message(client_address, "Guess too high.");
                send(new_socket, "Lower!", strlen("Lower!") + 1, 0);
            } else {
                log_message(client_address, "Correct guess!");
                send(new_socket, "Congratulations! You guessed it!", strlen("Congratulations! You guessed it!") + 1, 0);
                break;
            }
        }

        close(new_socket);
        log_message(client_address, "Client disconnected");
    }

    return 0;
}
